class Trienode{
    public:

    bool endofword;
    Trienode* children[26];
    string word;

    Trienode(){
        endofword=false;
        for(int i=0;i<26;i++){
            children[i]=NULL;
        }
        word="";
    }


    void insert(Trienode* root,string str){
        Trienode* node=root;
        for(char ch:str){
            if(node->children[ch-'a']==NULL){
                node->children[ch-'a']=new Trienode();
            }
            node=node->children[ch-'a'];
        }
        node->endofword=true;
        node->word=str;
    }
};

class Solution {
public:
    vector<string>ans;
    int n,m;

    
     
    void dfs(int row,int col,Trienode*root,vector<vector<char>>& board){
        if(row>=n || row<0 || col<0 || col>=m )return;

        if(board[row][col]=='$' || root->children[board[row][col]- 'a'] == NULL)return ;
        root=root->children[board[row][col]-'a'];
        int dr[4]={-1,1,0,0};
        int dc[4]={0,0,1,-1};

        if(root->endofword==true){
            ans.push_back(root->word);
            root->endofword=false;
        }
        char temp=board[row][col];
        board[row][col]='$';

        for(int x=0;x<4;x++){
            int nr=row+dr[x];
            int nc=col+dc[x];
            dfs(nr,nc,root,board);
        }
        board[row][col]=temp;


    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        n=board.size();
        m=board[0].size();
        
        Trienode* root=new Trienode();
        for(int i=0;i<words.size();i++){
            root->insert(root, words[i]);
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                char ch=board[i][j];
                if(root->children[ch-'a']!=NULL){
                    dfs(i,j,root,board);
                }
            }
        }
        return ans;
    }
};
